/***************************************************************************************************
 *  Ruby build template
 ***************************************************************************************************/

/***************************************************************************************************
* LEGEND:
***************************************************************************************************/
///////////////////////////////////// START OF PIPELINE ////////////////////////////////////////////
node("hubot")
{
  //clean the workspace
  cleanWs()

  // Set Variables
  def domain_name='<DOMAIN_NAME>'
  def user_name='<USER_NAME>'

  // Globals
  def payload
  def masterJobNumber
  def gitFlowInfo
  // Found errors
  def foundErrors='0'
  def branch
  def deployment_id
  def git_url="${domain_name}/demo/Ruby-Books.git"
  def api_url="https://${domain_name}/api/v3"
  def app_name="${user_name}-ruby-books"




  // Need to get the branch of code we need
  try
  {
    // Grab Branch from ENV
    branch = env.CHANGE_BRANCH
    if (branch == null || branch == "null")
    {
      // Set to master if not passed
      branch = "master"
      echo "No Passed Parameter: branch"
      echo "Defaulting to: master"
    }
  }
  catch(all)
  {
    branch = "master"
    echo "No Passed Parameter: branch"
    echo "Defaulting to: master"
  }

  sh "echo ********** BRANCH: ***********"
  sh "echo $branch"

  // Clone the repo
  git credentialsId: 'github-cred', url: "https://${git_url}", branch: "${branch}"

  /***************************************************************************************************
  ****************************************************************************************************
  * Deploy to Heroku Stage
  ****************************************************************************************************
  ***************************************************************************************************/
  if (branch == "hubot")
  {
    stage("DeployToHerokuProduction")
    {
      sh "echo '#########################################'"
      sh "echo 'Deploying to Heroku Production'"
      sh "echo '#########################################'"
      try
      {
         // run the build
        sh "chmod +x Automation/deploy-to-heroku.sh ; bash ./Automation/deploy-to-heroku.sh demo Ruby-Books <YOUR-NAME>-ruby-books"
      }
      catch(all)
      {
        echo "ERROR encountered during heroku deployment"
        throw all
        foundErrors=1
      }
    }
  }
  else
  {
    stage("DeployToHerokuReview")
    {
      sh "echo '#########################################'"
      sh "echo 'Deploying to Heroku Review Environment'"
      sh "echo '#########################################'"

      // Grab PR from ENV
      pr_number = env.CHANGE_ID

      def createDeploymentBody = """
      {
            "ref": "${branch}",
            "required_contexts":[],
            "environment": "review"
      }
      """
      def createDeploymentResponse = httpRequest authentication: 'github-cred', acceptType: 'APPLICATION_JSON', contentType: 'APPLICATION_JSON', httpMode: 'POST', requestBody: createDeploymentBody, url: "${api_url}/repos/demo/Ruby-Books/deployments"
      echo "Status: ${createDeploymentResponse.status}\nContent: ${createDeploymentResponse.content}"

      def deployment = readJSON text: createDeploymentResponse.content
      echo "Deployment: ${deployment}"
      deployment_id = deployment.id
      echo "ID: ${deployment_id}"

      def deploymentPendingBody = """
      {
            "state": "pending",
            "log_url": "https://dashboard.heroku.com/apps/<YOUR-NAME>-ruby-books-pr-${pr_number}/logs"
      }
      """
      def deploymentPendingResponse = httpRequest authentication: 'github-cred', acceptType: 'APPLICATION_JSON', contentType: 'APPLICATION_JSON', httpMode: 'POST', requestBody: deploymentPendingBody, url: "${api_url}/repos/demo/Ruby-Books/deployments/${deployment_id}/statuses"
      echo "Status: ${deploymentPendingResponse.status}\nContent: ${deploymentPendingResponse.content}"

      try
      {
        // run the build
        sh "chmod +x Automation/deploy-to-heroku.sh ; bash ./Automation/deploy-to-heroku.sh demo ruby-books ${app_name}-pr-${pr_number}"
      }
      catch(all)
      {
        echo "ERROR encountered during heroku deployment"

        def deploymentFailedBody = """
        {
              "state": "failure",
              "log_url": "https://dashboard.heroku.com/apps/${app_name}-pr-${pr_number}/logs"
        }
        """
        def deploymentFailureResponse = httpRequest authentication: 'github-cred', acceptType: 'APPLICATION_JSON', contentType: 'APPLICATION_JSON', httpMode: 'POST', requestBody: deploymentFailureBody, url: "${api_url}/repos/demo/Ruby-Books/deployments/${deployment_id}/statuses"
        echo "Status: ${deploymentFailureResponse.status}\nContent: ${deploymentFailureResponse.content}"

        throw all
        foundErrors=1
      }

      def deploymentSuccessBody = """
      {
            "state": "success",
            "log_url": "https://dashboard.heroku.com/apps/${app_name}-pr-${pr_number}/logs",
            "environment_url": "https://${app_name}-pr-${pr_number}.herokuapp.com"
      }
      """
      def deploymentSuccessResponse = httpRequest authentication: 'github-cred', acceptType: 'APPLICATION_JSON', contentType: 'APPLICATION_JSON', httpMode: 'POST', requestBody: deploymentSuccessBody, url: "${api_url}/repos/demo/Ruby-Books/deployments/${deployment_id}/statuses"
      echo "Status: ${deploymentSuccessResponse.status}\nContent: ${deploymentSuccessResponse.content}"
    }
  }


  /***************************************************************************************************
  ****************************************************************************************************
  * Build Ruby Stage
  ****************************************************************************************************
  ***************************************************************************************************/
  stage("BundleInstall")
  {
    sh "echo '#########################################'"
    sh "echo 'Running Bundle Install'"
    sh "echo '#########################################'"

    try
    {
       // run the build
      sh "chmod +x Automation/bundle-install.sh ; ./Automation/bundle-install.sh"
    }
    catch(all)
    {
      echo "ERROR encountered during ruby bundle install"
      throw all
      foundErrors=1
    }
  }

  /***************************************************************************************************
  ****************************************************************************************************
  * Generate and Configure DB Stage
  ****************************************************************************************************
  ***************************************************************************************************/
  stage("Generate And Configure DB")
  {
    sh "echo '#########################################'"
    sh "echo 'Generating and configuring Postgres DB'"
    sh "echo '#########################################'"

    try
    {
      // run the build
      sh "chmod +x Automation/configure-install-db.sh ; ./Automation/configure-install-db.sh"
    }
    catch(all)
    {
      echo "ERROR encountered during ruby db config"
      throw all
      foundErrors=1
    }
  }

  /***************************************************************************************************
  ****************************************************************************************************
  * Run RSPEC Stage
  ****************************************************************************************************
  ***************************************************************************************************/
  stage("Run RSPEC")
  {
    sh "echo '#########################################'"
    sh "echo 'Running Ruby RSPEC'"
    sh "echo '#########################################'"

    try
    {
      // run the build
      sh "chmod +x Automation/run-rspec.sh ; ./Automation/run-rspec.sh"
    }
    catch(all)
    {
      echo "ERROR encountered during ruby rspec"
      throw all
      foundErrors=1
    }
  }

  /***************************************************************************************************
  ****************************************************************************************************
  * Validate if errors found
  ****************************************************************************************************
  ***************************************************************************************************/
  if(foundErrors=='1')
  {
    sh "echo 'ERROR! Failed to Build Ruby App' && exit 911"
  }

  /***************************************************************************************************
  ****************************************************************************************************
  * END OF LOOP
  ****************************************************************************************************
  ***************************************************************************************************/
}
/***************************************************************************************************
****************************************************************************************************
* HELPER FUNCTIONS BELOW
***************************************************************************************************
***************************************************************************************************/

// Slurper method, using built in json
@NonCPS
def parseText(jsonpayload)
{
  jp = new groovy.json.JsonSlurper().parseText(jsonpayload)
  gfi = new GitFlowInfo()
  gfi.prUrl=jp.payload.pr_url;
  gfi.prNumber=jp.payload.pr;
  gfi.gitHeadUrl=jp.payload.head;
  gfi.gitBaseUrl=jp.payload.base;
  gfi.gitbefore=jp.payload.before;
  gfi.gitafter=jp.payload.after;
  gfi.gitRepository=jp.payload.repository;
  jp=null
  return gfi
}

// GIT Information for flowdock labels
class GitFlowInfo implements Serializable
{
  String prUrl;
  String prNumber;
  String gitHeadUrl;
  String gitBaseUrl;
  String gitRepository;
}
